<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>为什么要写log.isDebugEnabled()</title>
    <link href="/2021/12/15/log.isDebugEnabled()_/"/>
    <url>/2021/12/15/log.isDebugEnabled()_/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Java日志框架中需要判断log-isDebugEnabled-吗？"><a href="#Java日志框架中需要判断log-isDebugEnabled-吗？" class="headerlink" title="Java日志框架中需要判断log.isDebugEnabled()吗？"></a>Java日志框架中需要判断log.isDebugEnabled()吗？</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在日常开发中，项目会使用抽象日志接口slf4j来打印日志。如下是一段典型的打印日志代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">logger.debug(<span class="hljs-string">&quot;hello, world&quot;</span>);<br></code></pre></td></tr></table></figure><p>在一些项目或第三方开源框架中，也会发现有些代码在输出日志时，在前面添加if判断，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br>    logger.debug(<span class="hljs-string">&quot;hello, world&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="简单来说，先使用isDebufEnabled来判断日志级别。"><a href="#简单来说，先使用isDebufEnabled来判断日志级别。" class="headerlink" title="简单来说，先使用isDebufEnabled来判断日志级别。"></a>简单来说，先使用<code>isDebufEnabled</code>来判断日志级别。</h6><h6 id="那实际开发中，我们到底要不要判断isDebugEnabled呢？希望通过这篇文章来分享一些我对日志打印的思考。"><a href="#那实际开发中，我们到底要不要判断isDebugEnabled呢？希望通过这篇文章来分享一些我对日志打印的思考。" class="headerlink" title="那实际开发中，我们到底要不要判断isDebugEnabled呢？希望通过这篇文章来分享一些我对日志打印的思考。"></a>那实际开发中，我们到底要不要判断<code>isDebugEnabled</code>呢？希望通过这篇文章来分享一些我对日志打印的思考。</h6><h2 id="判断isDebugEnabled是能提升性能的"><a href="#判断isDebugEnabled是能提升性能的" class="headerlink" title="判断isDebugEnabled是能提升性能的?"></a>判断<code>isDebugEnabled</code>是能提升性能的?</h2><h6 id="有些人不明白为什么要添加if判断，会认为这样是为了控制日志的输出。其实这是不对的。对于下面的两段代码："><a href="#有些人不明白为什么要添加if判断，会认为这样是为了控制日志的输出。其实这是不对的。对于下面的两段代码：" class="headerlink" title="有些人不明白为什么要添加if判断，会认为这样是为了控制日志的输出。其实这是不对的。对于下面的两段代码："></a>有些人不明白为什么要添加if判断，会认为这样是为了控制日志的输出。其实这是不对的。对于下面的两段代码：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">logger.debug(<span class="hljs-string">&quot;hello, world&quot;</span>)<br><span class="hljs-keyword">if</span>(logger.isDebugEnabled())&#123;<br>    logger.debug(<span class="hljs-string">&quot;hello, world&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果应用的日志级别大于<code>debug</code>，比如为<code>info</code>。那么这两段代码，最终都不会输出日志。在<code>debug</code>方法内部，会判断日志级别，如果应用级别大于日志级别，就不会输出日志。以下是<code>isDebugEnabled</code>和<code>debug</code>的核心代码（我删除了一些无关代码）：</p><h4 id="简单的源码剖析"><a href="#简单的源码剖析" class="headerlink" title="简单的源码剖析"></a>简单的源码剖析</h4><h6 id="isDebugEnabled方法："><a href="#isDebugEnabled方法：" class="headerlink" title="isDebugEnabled方法："></a><code>isDebugEnabled</code>方法：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isDebugEnabled</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(repository.isDisabled( Level.DEBUG_INT))<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">return</span> Level.DEBUG.isGreaterOrEqual(<span class="hljs-keyword">this</span>.getEffectiveLevel());<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="debug方法："><a href="#debug方法：" class="headerlink" title="debug方法："></a><code>debug</code>方法：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">debug</span><span class="hljs-params">(Object message)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(repository.isDisabled(Level.DEBUG_INT))<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(Level.DEBUG.isGreaterOrEqual(<span class="hljs-keyword">this</span>.getEffectiveLevel())) &#123;<br>        forcedLog(FQCN, Level.DEBUG, message, <span class="hljs-keyword">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="那么问题来了，既然isDebugEnabled不会影响日志是否输出，那为什么要添加这个判断呢？"><a href="#那么问题来了，既然isDebugEnabled不会影响日志是否输出，那为什么要添加这个判断呢？" class="headerlink" title="那么问题来了，既然isDebugEnabled不会影响日志是否输出，那为什么要添加这个判断呢？"></a>那么问题来了，既然<code>isDebugEnabled</code>不会影响日志是否输出，那为什么要添加这个判断呢？</h4><p>我们考虑下面几段代码：</p><p>代码清单一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">logger.debug(<span class="hljs-string">&quot;hello, world&quot;</span>)<br></code></pre></td></tr></table></figure><p>代码清单二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(logger.isDebugEnabled())&#123;<br>    logger.debug(<span class="hljs-string">&quot;hello, world&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>代码清单三：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">logger.debug(<span class="hljs-string">&quot;hello&quot;</span> + <span class="hljs-string">&quot;world&quot;</span>);<br></code></pre></td></tr></table></figure><p>代码清单四：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">logger.debug(String.format(<span class="hljs-string">&quot;hello, %s&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>))<br></code></pre></td></tr></table></figure><p>代码清单五：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">logger.debug(<span class="hljs-string">&quot;hello &#123;&#125;&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>);<br></code></pre></td></tr></table></figure><p>以上5段代码，如果应用日志级别为info，那么这5段代码都不会输出日志。它们的差异其实是<strong>性能不同</strong>。下面我们来逐个分析。</p><ul><li>代码清单一：执行<code>debug</code>方法。<code>debug</code>方法内部判断日志级别，然后退出。</li><li>代码清单二：<code>isDebugEnabled</code>判断日志级别，然后退出。</li><li>代码清单三：先拼接字符串“hello”和“world”。然后执行<code>debug</code>方法。</li><li>代码清单四：先执行<code>String.format</code>方法，然后执行<code>debug</code>方法。</li><li>代码清单五：执行<code>debug</code>方法。</li></ul><p>大家发现了吗？虽然最终都不会输出日志，但这5段代码还是有差异的。代码清单三和代码清单四分别执行了”+”字符串拼接和<code>String.format</code>方法，但最终却没用到。也就是说，这两段代码执行了一些无用操作，造成了额外的性能损耗。</p><p>所以，代码清单二中添加<code>isDebugEnabled</code>可以避免无用的字符串操作，提高性能。</p><h4 id="在这里，我们不禁会想，那我们凡是要输日志的地方，都不判断isDebugEnabled-直接调debug方法，不更省事吗？"><a href="#在这里，我们不禁会想，那我们凡是要输日志的地方，都不判断isDebugEnabled-直接调debug方法，不更省事吗？" class="headerlink" title="在这里，我们不禁会想，那我们凡是要输日志的地方，都不判断isDebugEnabled,直接调debug方法，不更省事吗？"></a>在这里，我们不禁会想，那我们凡是要输日志的地方，都不判断isDebugEnabled,直接调debug方法，不更省事吗？</h4><h6 id="官方的说法是：出于效率考虑，看具体情况而定"><a href="#官方的说法是：出于效率考虑，看具体情况而定" class="headerlink" title="官方的说法是：出于效率考虑，看具体情况而定."></a>官方的说法是：出于效率考虑，看具体情况而定.</h6><h1 id="isDebugEnabled是必需的吗？"><a href="#isDebugEnabled是必需的吗？" class="headerlink" title="isDebugEnabled是必需的吗？"></a><code>isDebugEnabled</code>是必需的吗？</h1><p>上一节中，我提到使用<code>isDebugEnabled</code>可以提升性能，那是不是在所有地方都需要添加<code>isDebugEnabled</code>判断呢？</p><p>先说结论，不是的。应该根据具体场景来判断是否添加<code>isDebugEnabled</code>。</p><p>比如下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">logger.debug(<span class="hljs-string">&quot;hello, world&quot;</span>);<br></code></pre></td></tr></table></figure><p>打印一条日志“hello，world”。那么这时候就不用添加<code>isDebugEnabled</code>判断了。关于<code>isDebugEnabled</code>的使用场景，总结了如下的最佳实践：</p><h1 id="isDebugEnabled最佳实践"><a href="#isDebugEnabled最佳实践" class="headerlink" title="isDebugEnabled最佳实践"></a><code>isDebugEnabled</code>最佳实践</h1><h2 id="原则一：如果打印字符串常量，不需要isDebugEnabled"><a href="#原则一：如果打印字符串常量，不需要isDebugEnabled" class="headerlink" title="原则一：如果打印字符串常量，不需要isDebugEnabled"></a>原则一：如果打印字符串常量，不需要<code>isDebugEnabled</code></h2><p>比较下面两段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">logger.debug(<span class="hljs-string">&quot;hello, world&quot;</span>);<br><span class="hljs-keyword">if</span>(logger.isDebugEnabled())&#123;<br>    logger.debug(<span class="hljs-string">&quot;hello, world&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>因为打印的日志是字面常量，没有计算逻辑。两段代码的性能是几乎一样的。添加<code>isDebugEnabled</code>反而会导致额外的代码。</p><h2 id="原则二：如果有参数，且参数只是字符串常量或计算简单，使用占位符"><a href="#原则二：如果有参数，且参数只是字符串常量或计算简单，使用占位符" class="headerlink" title="原则二：如果有参数，且参数只是字符串常量或计算简单，使用占位符"></a>原则二：如果有参数，且参数只是字符串常量或计算简单，使用占位符</h2><p>考虑如下代码，<code>debug</code>方法包含了参数<code>user.getName()</code>。虽然执行<code>debug</code>方法时，会计算<code>user.getName()</code>，但只是一个简单的<strong>get</strong>方法，没有复杂计算，这时候，也可以不添加<code>isDebugEnabled</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">logger.debug(<span class="hljs-string">&quot;hello, &#123;&#125;&quot;</span>, user.getName());<br></code></pre></td></tr></table></figure><h2 id="原则三：如果有参数，且参数计算复杂，添加isDebugEnabled"><a href="#原则三：如果有参数，且参数计算复杂，添加isDebugEnabled" class="headerlink" title="原则三：如果有参数，且参数计算复杂，添加isDebugEnabled"></a>原则三：如果有参数，且参数计算复杂，添加<code>isDebugEnabled</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">logger.debug(<span class="hljs-string">&quot;order price: &#123;&#125;&quot;</span>, calculatePrice());<br></code></pre></td></tr></table></figure><p>假设<code>calculatePrice</code>方法需要经过复杂计算。那么就应该添加<code>isDebugEnabled</code>判断，使用如下的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(logger.isDebugEnabled())&#123;<br>    logger.debug(<span class="hljs-string">&quot;order price: &#123;&#125;&quot;</span>, calculatePrice());<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat</title>
    <link href="/2021/12/04/Tomcat/"/>
    <url>/2021/12/04/Tomcat/</url>
    
    <content type="html"><![CDATA[<p>Tomcat</p><p>[TOC]</p><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="版本篇"><a href="#版本篇" class="headerlink" title="版本篇"></a>版本篇</h2><h3 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h3><blockquote><p><a href="http://tomcat.apache.org/whichversion.html">Which version?</a></p></blockquote><h3 id="Apache-Tomcat-版本"><a href="#Apache-Tomcat-版本" class="headerlink" title="Apache Tomcat 版本"></a>Apache Tomcat 版本</h3><p>Apache Tomcat ®是 Jakarta EE（正式名称为 Java EE）技术子集的开源软件实现。不同版本的规范有不同版本的Apache Tomcat。<a href="https://cwiki.apache.org/confluence/display/TOMCAT/Specifications">规范</a>和各自的 Apache Tomcat 版本之间<a href="https://cwiki.apache.org/confluence/display/TOMCAT/Specifications">的</a>映射 是：</p><table><thead><tr><th align="left"><strong>Apache Tomcat 版本</strong></th><th align="left"><strong>最新发布版本</strong></th><th align="left"><strong>Servlet规范</strong></th><th align="left"><strong>JSP规范</strong></th><th align="left"><strong>EL 规格</strong></th><th align="left"><strong>WebSocket 规范</strong></th><th align="left"><strong>认证 (JASIC) 规范</strong></th><th align="left"><strong>支持的 Java 版本</strong></th></tr></thead><tbody><tr><td align="left">10.1.x</td><td align="left">10.1.0-M4（阿尔法）</td><td align="left">6.0</td><td align="left">待定</td><td align="left">待定</td><td align="left">待定</td><td align="left">待定</td><td align="left">11 及以后</td></tr><tr><td align="left">10.0.x</td><td align="left">10.0.10</td><td align="left">5.0</td><td align="left">3.0</td><td align="left">4.0</td><td align="left">2.0</td><td align="left">2.0</td><td align="left">8 及以后</td></tr><tr><td align="left">9.0.x</td><td align="left">9.0.52</td><td align="left">4.0</td><td align="left">2.3</td><td align="left">3.0</td><td align="left">1.1</td><td align="left">1.1</td><td align="left">8 及以后</td></tr><tr><td align="left">8.5.x</td><td align="left">8.5.70</td><td align="left">3.1</td><td align="left">2.3</td><td align="left">3.0</td><td align="left">1.1</td><td align="left">1.1</td><td align="left">7 及以后</td></tr><tr><td align="left">8.0.x（被取代）</td><td align="left">8.0.53（已取代）</td><td align="left">3.1</td><td align="left">2.3</td><td align="left">3.0</td><td align="left">1.1</td><td align="left">不适用</td><td align="left">7 及以后</td></tr><tr><td align="left">7.0.x（已存档）</td><td align="left">7.0.109（存档）</td><td align="left">3.0</td><td align="left">2.2</td><td align="left">2.2</td><td align="left">1.1</td><td align="left">不适用</td><td align="left">6 及更高版本 （WebSocket 为 7 及更高版本）</td></tr><tr><td align="left">6.0.x（已存档）</td><td align="left">6.0.53（存档）</td><td align="left">2.5</td><td align="left">2.1</td><td align="left">2.1</td><td align="left">不适用</td><td align="left">不适用</td><td align="left">5 及以后</td></tr><tr><td align="left">5.5.x（已存档）</td><td align="left">5.5.36（存档）</td><td align="left">2.4</td><td align="left">2.0</td><td align="left">不适用</td><td align="left">不适用</td><td align="left">不适用</td><td align="left">1.4 及更高版本</td></tr><tr><td align="left">4.1.x（已存档）</td><td align="left">4.1.40（存档）</td><td align="left">2.3</td><td align="left">1.2</td><td align="left">不适用</td><td align="left">不适用</td><td align="left">不适用</td><td align="left">1.3 及更高版本</td></tr><tr><td align="left">3.3.x（已存档）</td><td align="left">3.3.2（存档）</td><td align="left">2.2</td><td align="left">1.1</td><td align="left">不适用</td><td align="left">不适用</td><td align="left">不适用</td><td align="left">1.1 及更高版本</td></tr></tbody></table><h3 id="Tomcat版本对照表"><a href="#Tomcat版本对照表" class="headerlink" title="Tomcat版本对照表"></a><a href="https://www.cnblogs.com/money131/p/10661394.html">Tomcat版本对照表</a></h3><blockquote><p> 导入程序前环境要先配好，环境要想配的正确，版本信息一定要了解。</p></blockquote><table><thead><tr><th align="center">Tomcat版本</th><th align="center">6.0</th><th align="center">7.0</th><th align="center">8.0</th><th align="center">8.5</th><th align="center">9.0</th></tr></thead><tbody><tr><td align="center"><strong>JDK</strong></td><td align="center">≥5.0</td><td align="center">≥6.0</td><td align="center">≥7.0</td><td align="center">≥7.0</td><td align="center">≥8.0</td></tr><tr><td align="center"><strong>Servlet</strong></td><td align="center">2.5</td><td align="center">3.0</td><td align="center">3.1</td><td align="center">3.1</td><td align="center">4.0</td></tr><tr><td align="center"><strong>JSP</strong></td><td align="center">2.1</td><td align="center">2.2</td><td align="center">2.3</td><td align="center">2.3</td><td align="center">2.3</td></tr><tr><td align="center"><strong>EL</strong></td><td align="center">2.1</td><td align="center">2.2</td><td align="center">3.0</td><td align="center">3.0</td><td align="center">3.0</td></tr><tr><td align="center"><strong>WebScoket</strong></td><td align="center">N/A</td><td align="center">1.1</td><td align="center">1.1</td><td align="center">1.1</td><td align="center">1.1</td></tr></tbody></table><h2 id="下载篇"><a href="#下载篇" class="headerlink" title="下载篇"></a>下载篇</h2><h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><blockquote><p><a href="http://tomcat.apache.org/">Tomcat</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>基础篇</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown语法</title>
    <link href="/2021/12/04/Markdown%E8%AF%AD%E6%B3%95_/"/>
    <url>/2021/12/04/Markdown%E8%AF%AD%E6%B3%95_/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="献给写作者的-Markdown-新手指南"><a href="#献给写作者的-Markdown-新手指南" class="headerlink" title="献给写作者的 Markdown 新手指南"></a><a href="https://www.jianshu.com/p/q81RER">献给写作者的 Markdown 新手指南</a></h1><p><a href="https://www.jianshu.com/p/q81RER">献给写作者的 Markdown 新手指南</a></p><p><a href="https://www.jianshu.com/">「简书」</a>作为一款「写作软件」在诞生之初就支持了 Markdown，Markdown 是一种「电子邮件」风格的「标记语言」，我们强烈推荐所有写作者学习和掌握该语言。为什么？可以参考:</p><ul><li><a href="https://www.jianshu.com/p/qqGjLN">『为什么作家应该用 Markdown 保存自己的文稿』</a>。</li><li><a href="https://www.jianshu.com/p/PpDNMG">『Markdown写作浅谈』</a></li></ul><p>在此，我们总结 Markdown 的优点如下：</p><ul><li>纯文本，所以兼容性极强，可以用所有文本编辑器打开。</li><li>让你专注于文字而不是排版。</li><li>格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。</li><li>Markdown 的标记语法有极好的可读性。</li></ul><p>当然，我们既然如此推崇 Markdown ，也必定会教会你使用 Markdown ，这也是本文的目的所在。不过，虽然 <a href="https://link.jianshu.com/?t=http://wowubuntu.com/markdown/">Markdown 的语法</a>已经足够简单，但是现有的 Markdown 语法说明更多的是写给 web 从业者看的，对于很多写作者来说，学习起来效率很低，现在，我们特地为写作者量身定做本指南，从写作者的实际需求出发，介绍写作者真正实用的常用格式，深入浅出、图文并茂地让您迅速掌握 Markdown 语法。</p><p>为了使您更好地学习，我们建议您登录<a href="%5Bhttp://www%5D(https://link.jianshu.com?t=http://www">「简书」</a>. <a href="https://jianshu.com/">jianshu.com</a>)，将您的编辑器切换至 Markdown 编辑器，新建一篇空白笔记，然后点击右上角的预览模式：</p><p><img src="https://michaelma-typora-assets.oss-cn-beijing.aliyuncs.com/Typora/img/assets/%E6%A0%87%E9%A2%98.webp" alt="标题"></p><p>此时，您的界面应当如下图所示，左侧为编辑区域，右侧为预览区域，您在左侧输入 Markdown 语法的文本，右侧会立即帮您呈现最终结果，好了，让我们开始学习吧~</p><p><img src="https://michaelma-typora-assets.oss-cn-beijing.aliyuncs.com/Typora/img/assets/259-05f6819ea5aa4fdd.webp" alt="259-05f6819ea5aa4fdd"></p><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>这是最为常用的格式，在平时常用的的文本编辑器中大多是这样实现的：输入文本、选中文本、设置标题格式。</p><p>而在 Markdown 中，你只需要在文本前面加上 <code>#</code> 即可，同理、你还可以增加二级标题、三级标题、四级标题、五级标题和六级标题，总共六级，只需要增加 <code>#</code> 即可，标题字号相应降低。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 一级标题</span><br><span class="hljs-comment">## 二级标题</span><br><span class="hljs-comment">### 三级标题</span><br><span class="hljs-comment">#### 四级标题</span><br><span class="hljs-comment">##### 五级标题</span><br><span class="hljs-comment">###### 六级标题 </span><br></code></pre></td></tr></table></figure><p><em>注：<code>#</code> 和「一级标题」之间建议保留一个字符的空格，这是最标准的 Markdown 写法。</em></p><p><em>你可以你的编辑器中尝试输入这六级标题，可以参考下方的截图：</em></p><p><img src="https://michaelma-typora-assets.oss-cn-beijing.aliyuncs.com/Typora/img/assets/259-7424a9a21a2cb81b.webp" alt="259-7424a9a21a2cb81b"></p><p>一级标题至六级标题</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>列表格式也很常用，在 Markdown 中，你只需要在文字前面加上 <code>-</code> 就可以了，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">- 文本1<br>- 文本2<br>- 文本3<br></code></pre></td></tr></table></figure><p>如果你希望有序列表，<br> 也可以在文字前面加上 <code>1.</code> <code>2.</code> <code>3.</code> 就可以了，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">1. 文本1<br>2. 文本2<br>3. 文本3<br></code></pre></td></tr></table></figure><p><em>注：<code>-</code>、<code>1.</code>和文本之间要保留一个字符的空格。</em></p><p><em>列表案例截图如下：</em></p><p><img src="https://michaelma-typora-assets.oss-cn-beijing.aliyuncs.com/Typora/img/assets/259-8ccbfed8ce487368.webp" alt="259-8ccbfed8ce487368"></p><h2 id="picture"> 链接和图片</h2><p>在 Markdown 中，插入链接不需要其他按钮，你只需要使用 <code>[显示文本](链接地址)</code> 这样的语法即可，例如：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">简书</span>](http:<span class="hljs-comment">//www.jianshu.com)</span><br></code></pre></td></tr></table></figure><p>在 Markdown 中，插入图片不需要其他按钮，你只需要使用 <code>![](图片链接地址)</code> 这样的语法即可，例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">![](http:<span class="hljs-comment">//upload-images.jianshu.io/upload_images/259-0ad0d0bfc1c608b6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br></code></pre></td></tr></table></figure><p><em>注：插入图片的语法和链接的语法很像，只是前面多了一个 <code>！</code>。</em></p><p><em>插入链接和图片的案例截图：</em></p><p><img src="https://michaelma-typora-assets.oss-cn-beijing.aliyuncs.com/Typora/img/assets/259-8ccbfed8ce487368-16385854076373.webp" alt="259-8ccbfed8ce487368"></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在我们写作的时候经常需要引用他人的文字，这个时候引用这个格式就很有必要了，在 Markdown 中，你只需要在你希望引用的文字前面加上 <code>&gt;</code> 就好了，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&gt; 一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。<br></code></pre></td></tr></table></figure><p><em>注：<code>&gt;</code> 和文本之间要保留一个字符的空格。</em></p><p>最终显示的就是：</p><blockquote><p>一盏灯， 一片昏黄； 一简书， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p></blockquote><p><em>引用的案例截图：</em></p><p><img src="https://michaelma-typora-assets.oss-cn-beijing.aliyuncs.com/Typora/img/assets/259-438c3424cfbfb029.webp" alt="259-438c3424cfbfb029"></p><h2 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h2><p>Markdown 的粗体和斜体也非常简单，用两个 <code>*</code> 包含一段文本就是粗体的语法，用一个 <code>*</code> 包含一段文本就是斜体的语法。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">*一盏灯*， 一片昏黄；**一简书**， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。<br></code></pre></td></tr></table></figure><p>最终显示的就是下文，其中「一盏灯」是斜体，「一简书」是粗体：</p><p><em>一盏灯</em>， 一片昏黄；<strong>一简书</strong>， 一杯淡茶。 守着那一份淡定， 品读属于自己的寂寞。 保持淡定， 才能欣赏到最美丽的风景！ 保持淡定， 人生从此不再寂寞。</p><p><em>粗体和斜体的案例截图：</em></p><p><img src="https://michaelma-typora-assets.oss-cn-beijing.aliyuncs.com/Typora/img/assets/259-6a74e417a86ac97f.webp" alt="259-6a74e417a86ac97f"></p><h2 id="代码引用"><a href="#代码引用" class="headerlink" title="代码引用"></a>代码引用</h2><p>需要引用代码时，如果引用的语句只有一段，不分行，可以用 ` 将语句包起来。<br> 如果引用的语句为多行，可以将```置于这段代码的首行和末行。<br> <em>代码引用的案例截图：</em></p><p><img src="https://michaelma-typora-assets.oss-cn-beijing.aliyuncs.com/Typora/img/assets/259-dcf737a97e71cd73.webp" alt="259-dcf737a97e71cd73"></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>相关代码：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-params">| Tables        |</span> Are           <span class="hljs-params">| Cool  |</span><br><span class="hljs-params">| ------------- |</span><span class="hljs-symbol">:-------------</span><span class="hljs-symbol">:|</span> -----<span class="hljs-symbol">:|</span><br><span class="hljs-params">| col 3 is      |</span> right-aligned <span class="hljs-params">| $1600 |</span><br><span class="hljs-params">| col 2 is      |</span> centered      <span class="hljs-params">|   $12 |</span><br><span class="hljs-params">| zebra stripes |</span> are neat      <span class="hljs-params">|    $1 |</span><br></code></pre></td></tr></table></figure><p>显示效果：</p><table><thead><tr><th>Tables</th><th align="center">Are</th><th align="right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td align="center">right-aligned</td><td align="right">$1600</td></tr><tr><td>col 2 is</td><td align="center">centered</td><td align="right">$12</td></tr><tr><td>zebra stripes</td><td align="center">are neat</td><td align="right">$1</td></tr></tbody></table><p></p> 相关代码：<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby">dog <span class="hljs-params">| bird |</span> cat<br>----<span class="hljs-params">|------|</span>----<br>foo <span class="hljs-params">| foo  |</span> foo<br>bar <span class="hljs-params">| bar  |</span> bar<br>baz <span class="hljs-params">| baz  |</span> baz<br></code></pre></td></tr></table></figure><p>显示效果：</p><table><thead><tr><th>dog</th><th>bird</th><th>cat</th></tr></thead><tbody><tr><td>foo</td><td>foo</td><td>foo</td></tr><tr><td>bar</td><td>bar</td><td>bar</td></tr><tr><td>baz</td><td>baz</td><td>baz</td></tr></tbody></table><p></p><h2 id="显示链接中带括号的图片"><a href="#显示链接中带括号的图片" class="headerlink" title="显示链接中带括号的图片"></a>显示链接中带括号的图片</h2><p><img src="http://latex.codecogs.com/gif.latex(https://link.jianshu.com?t=http://latex.codecogs.com/gif.latex)?%5Cprod%20(n_%7Bi%7D)+1"></p><p><img src="https://michaelma-typora-assets.oss-cn-beijing.aliyuncs.com/Typora/img/assets/image-20211204104119300.png" alt="image-20211204104119300"></p><p>代码如下:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp">![][<span class="hljs-number">1</span>]<br>[<span class="hljs-meta">1</span>]: http:<span class="hljs-comment">//latex.codecogs.com/gif.latex?\prod%20\(n_&#123;i&#125;\)+1</span><br></code></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上几种格式是比较常用的格式，所以我们针对这些语法做了比较详细的说明。除这些之外，Markdown 还有其他语法，如想了解和学习更多，可以参考这篇<a href="https://link.jianshu.com/?t=http://wowubuntu.com/markdown/">『Markdown 语法说明』</a>。</p><p>强烈建议您现在就立马用 Markdown 写一篇文章吧，体会一下 Markdown 的优雅之处！</p><p>最后，希望我们的指南可以帮助到您，也希望<a href="https://www.jianshu.com/">「简书」</a>能够成为您书写 Markdown 的最佳选择。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>分页表格API文档</title>
    <link href="/2021/11/05/%E5%88%86%E9%A1%B5%E8%A1%A8%E6%A0%BCAPI%E6%96%87%E6%A1%A3/"/>
    <url>/2021/11/05/%E5%88%86%E9%A1%B5%E8%A1%A8%E6%A0%BCAPI%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<p>分页表格API文档</p><p>[TOC]</p><h1 id="分页表格API文档"><a href="#分页表格API文档" class="headerlink" title="分页表格API文档"></a>分页表格API文档</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>用于大量结构化数据的分页查询，支持分页、排序、筛选、自定义渲染、导出等复杂功能</p><p><img src="https://michaelma-typora-assets.oss-cn-beijing.aliyuncs.com/Typora/img/assets/image-20210528125223140.png" alt="image-20210528125223140"></p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h3><table>    <tr>        <th width="20%">属性 </th>        <th>说明</th>        <th width="10%">类型</th>        <th width="10%">默认值</th>    </tr>    <tr>        <td>dataUrl</td>        <td>表格取数的URL,接收参数有：offset、limit、sort、order以及查询条件相关参数,            返回数据为List[Map...]形式</td>        <td>String</td>        <td>""</td>    </tr>    <tr>        <td>columns</td>        <td>表格列的配置描述，具体项见后文</td>        <td>Array</td>        <td>[]</td>    </tr>    <tr>        <td>stripe</td>        <td>是否显示间隔斑马纹</td>        <td>Boolean</td>        <td>true</td>    </tr>    <tr>        <td>border</td>        <td>是否显示纵向边框</td>        <td>Boolean</td>        <td>true</td>    </tr>    <tr>        <td>show-header</td>        <td>是否显示表头</td>        <td>Boolean</td>        <td>true</td>    </tr>    <tr>        <td>width</td>        <td>表格宽度，单位 px</td>        <td>Number | String</td>        <td>自动</td>    </tr>    <tr>        <td>height</td>        <td>表格高度，单位 px，设置后，如果表格内容大于此值，会固定表头</td>        <td>Number | String</td>        <td>-</td>    </tr>    <tr>        <td>loading</td>        <td>是否显示加载中</td>        <td>Boolean</td>        <td>false</td>    </tr>    <tr>        <td>disabled-hover</td>        <td>禁用鼠标悬停时的高亮</td>        <td>Boolean</td>        <td>false</td>    </tr>    <tr>        <td>row-class-name</td>        <td>行的 className 的回调方法，传入参数：row：当前行数据；index：当前行的索引</td>        <td>Boolean</td>        <td>false</td>    </tr>    <tr>        <td>size</td>        <td>表格尺寸，可选值为 large、small、default 或者不填</td>        <td>String</td>        <td>default</td>    </tr>    <tr>        <td>highlightRow</td>        <td>是否支持高亮选中的行，即单选</td>        <td>Boolean</td>        <td>false</td>    </tr>    <tr>        <td>no-data-text</td>        <td>数据为空时显示的提示内容</td>        <td>String</td>        <td>暂无数据</td>    </tr>    <tr>        <td>no-filtered-data-text</td>        <td>筛选数据为空时显示的提示内容</td>        <td>String</td>        <td>暂无筛选结果</td>    </tr>    <tr>        <td>showTableOption</td>        <td>是否显示右上表格操作按钮</td>        <td>Boolean</td>        <td>true</td>    </tr></table><h3 id="表格事件"><a href="#表格事件" class="headerlink" title="表格事件"></a>表格事件</h3><table>    <tr>        <th width="20%">属性名</th>        <th>说明</th>        <th width="50%">返回值</th>    </tr>    <tr>        <td>on-row-click</td>        <td>单击某一行时触发</td>        <td>row:当前行的数据,index:当前行索引</td>    </tr>    <tr>        <td>on-row-dblclick</td>        <td>双击某一行时触发</td>        <td>row:当前行的数据,index:当前行索引</td>    </tr>    <tr>        <td>on-select</td>        <td>在多选模式下有效，选中某一项时触发</td>        <td>selection：已选项数据;row：刚选择的项数据</td>    </tr>    <tr>        <td>on-select-cancel</td>        <td>在多选模式下有效，取消选中某一项时触发</td>        <td>selection：已选项数据;row：取消选择的项数据</td>    </tr>    <tr>        <td>on-select-all</td>        <td>在多选模式下有效，点击全选时触发</td>        <td>selection：已选项数据</td>    </tr>    <tr>        <td>on-selection-change</td>        <td>在多选模式下有效，只要选中项发生变化时就会触发</td>        <td>selection：已选项数据</td>    </tr>    <tr>        <td>on-page-change</td>        <td>页码改变的回调，返回改变后的页码</td>        <td>页码</td>    </tr>    <tr>        <td>on-page-size-change</td>        <td>切换每页条数时的回调，返回切换后的每页条数</td>        <td>每页条数</td>    </tr></table><h3 id="表格插槽"><a href="#表格插槽" class="headerlink" title="表格插槽"></a>表格插槽</h3><table>    <tr>        <th width="50%">名称</th>        <th width="50%">说明</th>    </tr>    <tr>        <td>search</td>        <td>查询条件</td>    </tr>    <tr>        <td>option</td>        <td>自定义右上操作按钮</td>    </tr>    <tr>        <td>header</td>        <td>表头</td>    </tr>    <tr>        <td>footer</td>        <td>表尾</td>    </tr>    <tr>        <td>loading</td>        <td>加载中</td>    </tr></table><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><table>    <tr>        <th width="30%">方法名</th>        <th width="40%">说明</th>        <th width="30%">参数</th>    </tr>    <tr>        <td>tableRefresh</td>        <td>刷新表格</td>        <td>无</td>    </tr></table><h3 id="列属性"><a href="#列属性" class="headerlink" title="列属性"></a>列属性</h3><p>列描述数据对象，是columns中的一项</p><table> <tr>    <th>属性</th>    <th>说明</th>    <th>类型</th>    <th>默认值</th> </tr> <tr>    <td>type</td>    <td>列类型，可选值为 index:将此列渲染为索引列、selection：将此列渲染为选择列、expand:将此列渲染为可展开列、html:将此列数据解析成html输出</td>    <td>String</td>    <td>-</td></tr><tr>    <td>title</td>    <td>列头显示文字</td>    <td>String</td>    <td>#</td></tr><tr>    <td>key</td>    <td>对应列内容的字段名</td>    <td>String</td>    <td>-</td></tr><tr>        <td>width</td>        <td>列宽</td>        <td>Number</td>        <td>-</td>    </tr>    <tr>        <td>align</td>        <td>对齐方式，可选值为 <code>left</code> 左对齐、<code>right</code> 右对齐和 <code>center</code> 居中对齐</td>        <td>String</td>        <td>left</td>    </tr>    <tr>        <td>className</td>        <td>列的样式名称</td>        <td>String</td>        <td>-</td>    </tr>    <tr>        <td>fixed</td>        <td>列是否固定在左侧或者右侧，可选值为 <code>left</code> 左侧和 <code>right</code> 右侧</td>        <td>String</td>        <td>-</td>    </tr>    <tr>        <td>ellipsis</td>        <td>开启后，文本将不换行，超出部分显示为省略号</td>        <td>Boolean</td>        <td>false</td>    </tr>    <tr>        <td>render</td>        <td>自定义渲染列，使用 Vue 的 Render 函数。传入两个参数，第一个是 h，第二个为对象，包含 row、column 和 index，分别指当前行数据，当前列数据，当前行索引，详见示例。        [学习render函数](https://cn.vuejs.org/v2/guide/render-function.html)</td>        <td>Function</td>        <td>-</td>    </tr>    <tr>        <td>renderHeader</td>        <td>自定义列头显示内容，使用 Vue 的 Render 函数。传入两个参数，第一个是 h，第二个为对象，包含 <code>column</code> 和 <code>index</code>，分别为当前列数据和当前列索引。        </td>        <td>Function</td>        <td>-</td>    </tr>    <tr>        <td>sortable</td>        <td>对应列是否可以排序，如果设置为 <code>custom</code>，则代表用户希望远程排序，需要监听 Table 的 on-sort-change 事件</td>        <td>Boolean</td>        <td>false</td>    </tr>    <tr>        <td>sortMethod</td>        <td>自定义排序使用的方法，接收三个参数 a 、 b 和 type，当设置 <code>sortable: true</code> 时有效。type 值为 asc 和 desc</td>        <td>Function</td>        <td>-</td>    </tr>    <tr>        <td>sortType</td>        <td>设置初始化排序。值为 asc 和 desc</td>        <td>String</td>        <td>-</td>    </tr>    <tr>        <td>filters</td>        <td>过滤数据的选项，格式为数组，数组中每项包含 <code>label</code> 和 <code>value</code> 属性，使用过滤，必须同时配置 filterMethod</td>        <td>Array</td>        <td>-</td>    </tr>    <tr>        <td>filterMethod</td>        <td>数据过滤使用的方法，如果是多选的筛选项，对每一条数据会执行多次，任意一次返回 true 就会显示</td>        <td>Function</td>        <td>-</td>    </tr>    <tr>        <td>filterMultiple</td>        <td>数据过滤的选项是否多选</td>        <td>Boolean</td>        <td>true</td>    </tr>    <tr>        <td>filteredValue</td>        <td>在初始化时使用过滤，数组，值为需要过滤的 value 集合</td>        <td>Array</td>        <td>-</td>    </tr>    <tr>        <td>filterRemote</td>        <td>使用远程过滤</td>        <td>Function</td>        <td>-</td>    </tr></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>office2019专业版</title>
    <link href="/2021/11/05/office2019%E4%B8%93%E4%B8%9A%E7%89%88/"/>
    <url>/2021/11/05/office2019%E4%B8%93%E4%B8%9A%E7%89%88/</url>
    
    <content type="html"><![CDATA[<p>office2019专业版</p><p>[TOC]</p><h1 id="office2019专业版"><a href="#office2019专业版" class="headerlink" title="office2019专业版"></a>office2019专业版</h1><p>官网下载地址：<a href="http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/ProPlus2019Retail.img">http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/ProPlus2019Retail.img</a><br>安装激活步骤：<br>1.复制链接到浏览器地址栏下载；<br>2.找到下载的文件鼠标右键，有装载选择装载，没有就选择“解压到Pro…”<br>3.双击setup开始安装；<br>4.安装完成后打开word软件，在弹出的窗口点击“我不想登录或创建帐户”<br>5.联系客服获取密钥激活Office。</p><p>office 2019密钥 WFXNM-3GGBF-9W4TX-6R8F6-GMWJ6<br>下载方式一，打开链接即可下载：<br><a href="http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/ProPlus2019Retail.img">http://officecdn.microsoft.com/pr/492350f6-3a01-4f97-b9c0-c7c6ddf67d60/media/zh-cn/ProPlus2019Retail.img</a></p><p>office 2019百度网盘下载：<br>链接: <a href="https://pan.baidu.com/s/1FylwGe8VvrCXkYONBAFtfg">https://pan.baidu.com/s/1FylwGe8VvrCXkYONBAFtfg</a> 提取码: p4a6 </p><p>迅雷下载：<br>ed2k://|file|cn_office_professional_plus_2019_x86_x64_dvd_5e5be643.iso|3775004672|1E4FFA5240F21F60DC027F73F1C62FF4|/</p><p>迅雷任务，打开迅雷-新建任务-直接复制进去下载完，下载好了以后，右击–解压，解压后双击 “setup”安装；安装好的输入密钥操作激活即可<br>-—————-<br>激活步骤：打开word输入产品密钥，输入后，点击激活，关掉软件，重新打开word，选电话激活，然后使用网页激活<br>office 网页激活方式：<br><a href="http://webact.185.hk/">http://webact.185.hk/</a></p><p>打开链接，然后在7位数字的安装ID那里，输入你的9组数字，然后点击提交，记得得出激活ID，然后你把激活ID去输入，激活激活了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>表格列添加排序</title>
    <link href="/2021/11/05/%E8%A1%A8%E6%A0%BC%E5%88%97%E6%B7%BB%E5%8A%A0%E6%8E%92%E5%BA%8F/"/>
    <url>/2021/11/05/%E8%A1%A8%E6%A0%BC%E5%88%97%E6%B7%BB%E5%8A%A0%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>表格列添加排序</p><p>[TOC]</p><h2 id="表格列添加排序"><a href="#表格列添加排序" class="headerlink" title="表格列添加排序"></a>表格列添加排序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">sortable: <span class="hljs-string">&#x27;true&#x27;</span>,<br><span class="hljs-attr">sortField</span>: <span class="hljs-string">&#x27;CUST_NAME&#x27;</span>,<br></code></pre></td></tr></table></figure><h2 id="表格列添加排序-1"><a href="#表格列添加排序-1" class="headerlink" title="表格列添加排序"></a>表格列添加排序</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">@on-sort-change=<span class="hljs-string">&quot;onSort&quot;</span><br><br><span class="hljs-attr">searchForm</span>: &#123;<br>        <span class="hljs-attr">order</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">sort</span>: <span class="hljs-string">&#x27;&#x27;</span>,<br>    &#125;,<br><br><span class="hljs-function"><span class="hljs-title">onSort</span>(<span class="hljs-params">column,order</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.searchForm.sort = column;<br>    <span class="hljs-built_in">this</span>.searchForm.order = order;<br>&#125;,<br>    <br><span class="hljs-attr">sortable</span>: <span class="hljs-string">&quot;custom&quot;</span>,<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestParam(required = false, defaultValue = &quot;optionIdPr&quot;, value = &quot;sort&quot;)</span> String sort,<br><span class="hljs-meta">@RequestParam(required = false, defaultValue = &quot;desc&quot;, value = &quot;order&quot;)</span> String order,<br><br><span class="hljs-keyword">if</span> (!StringUtils.isBlank(sort) &amp;&amp; !StringUtils.isBlank(order)) &#123;<br>    String aCase = sort.replaceAll(<span class="hljs-string">&quot;[A-Z]&quot;</span>, <span class="hljs-string">&quot;_$0&quot;</span>).toLowerCase();<span class="hljs-comment">//驼峰命名转下划线</span><br>    lmCreditOptionExample.setOrderByClause(aCase + <span class="hljs-string">&quot; &quot;</span> + order);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestParam(required = false, defaultValue = &quot;optionIdPr&quot;, value = &quot;sort&quot;)</span> String sort,<br><span class="hljs-meta">@RequestParam(required = false, defaultValue = &quot;desc&quot;, value = &quot;order&quot;)</span> String order,<br><br><span class="hljs-keyword">if</span> (!StringUtils.isBlank(sort) &amp;&amp; !StringUtils.isBlank(order)) &#123;<br>    String aCase = sort.replaceAll(<span class="hljs-string">&quot;[A-Z]&quot;</span>, <span class="hljs-string">&quot;_$0&quot;</span>).toLowerCase();<br>    params.put(<span class="hljs-string">&quot;sort&quot;</span>, aCase);<br>    params.put(<span class="hljs-string">&quot;order&quot;</span>, order);<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;null != sort and &#x27;&#x27; != order&quot;</span>&gt;</span><br>    ORDER BY $&#123;sort&#125; $&#123;order&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>    ORDER BY A.OPTION_ID_PR DESC<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>可编辑表格</title>
    <link href="/2021/11/05/%E5%8F%AF%E7%BC%96%E8%BE%91%E8%A1%A8%E6%A0%BC/"/>
    <url>/2021/11/05/%E5%8F%AF%E7%BC%96%E8%BE%91%E8%A1%A8%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<p>可编辑表格</p><p>[TOC]</p><h1 id="可编辑表格"><a href="#可编辑表格" class="headerlink" title="可编辑表格"></a>可编辑表格</h1><p>用于对结构化数据的编辑</p><p><img src="https://michaelma-typora-assets.oss-cn-beijing.aliyuncs.com/Typora/img/assets/image-20210528125356327.png" alt="image-20210528125356327"></p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h3><table><tr>    <th>属性</th>    <th>说明</th>    <th>类型</th>    <th>默认值</th></tr><tr>    <td>v-model</td>    <td>表格数据，List[Map]格式</td>    <td>Array</td>    <td>[]</td></tr><tr>    <td>columns</td>    <td>表格的列描述，具体见下文</td>    <td>Array</td>    <td>[]</td></tr><tr>    <td>stripe</td>    <td>是否显示间隔斑马纹</td>    <td>Boolean</td>    <td>true</td></tr><tr>    <td>border</td>    <td>是否显示纵向边框</td>    <td>Boolean</td>    <td>true</td></tr><tr>    <td>show-header</td>    <td>是否显示表头</td>    <td>Boolean</td>    <td>true</td></tr><tr>    <td>width</td>    <td>表格宽度，单位 px</td>    <td>Number | String</td>    <td>自动</td></tr><tr>    <td>height</td>    <td>表格高度，单位 px，设置后，如果表格内容大于此值，会固定表头</td>    <td>Number | String</td>    <td>-</td></tr><tr>    <td>loading</td>    <td>是否显示加载中</td>    <td>Boolean</td>    <td>false</td></tr><tr>    <td>disabled-hover</td>    <td>禁用鼠标悬停时的高亮</td>    <td>Boolean</td>    <td>false</td></tr><tr>    <td>row-class-name</td>    <td>行的 className 的回调方法，传入参数：row：当前行数据；index：当前行的索引</td>    <td>Boolean</td>    <td>false</td></tr><tr>    <td>size</td>    <td>表格尺寸，可选值为 large、small、default 或者不填</td>    <td>String</td>    <td>default</td></tr><tr>    <td>highlightRow</td>    <td>是否支持高亮选中的行，即单选</td>    <td>Boolean</td>    <td>false</td></tr><tr>    <td>no-data-text</td>    <td>数据为空时显示的提示内容</td>    <td>String</td>    <td>暂无数据</td></tr><tr>    <td>no-filtered-data-text</td>    <td>筛选数据为空时显示的提示内容</td>    <td>String</td>    <td>暂无筛选结果</td></tr><tr>    <td>showTableOption</td>    <td>是否显示右上表格操作按钮</td>    <td>Boolean</td>    <td>true</td></tr></table><h3 id="表格事件"><a href="#表格事件" class="headerlink" title="表格事件"></a>表格事件</h3><table>    <tr>        <th width="20%">属性名</th>        <th>说明</th>        <th width="50%">返回值</th>    </tr>    <tr>        <td>on-row-click</td>        <td>单击某一行时触发</td>        <td>row:当前行的数据,index:当前行索引</td>    </tr>    <tr>        <td>on-row-dblclick</td>        <td>双击某一行时触发</td>        <td>row:当前行的数据,index:当前行索引</td>    </tr>    <tr>        <td>on-sort-change</td>        <td>排序时有效，当点击排序时触发</td>        <td>column：当前列数据;key：排序依据的指标;order：排序的顺序，值为 asc 或 desc</td>    </tr>    <tr>        <td>on-select</td>        <td>在多选模式下有效，选中某一项时触发</td>        <td>selection：已选项数据;row：刚选择的项数据</td>    </tr>    <tr>        <td>on-select-cancel</td>        <td>在多选模式下有效，取消选中某一项时触发</td>        <td>selection：已选项数据;row：取消选择的项数据</td>    </tr>    <tr>        <td>on-select-all</td>        <td>在多选模式下有效，点击全选时触发</td>        <td>selection：已选项数据</td>    </tr>    <tr>        <td>on-selection-change</td>        <td>在多选模式下有效，只要选中项发生变化时就会触发</td>        <td>selection：已选项数据</td>    </tr></table><h3 id="表格插槽"><a href="#表格插槽" class="headerlink" title="表格插槽"></a>表格插槽</h3><table>    <tr>        <th width="50%">名称</th>        <th width="50%">说明</th>    </tr>    <tr>        <td>header</td>        <td>表头</td>    </tr>    <tr>        <td>footer</td>        <td>表尾</td>    </tr>    <tr>        <td>loading</td>        <td>加载中</td>    </tr></table><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><table>    <tr>        <th width="30%">方法名</th>        <th width="40%">说明</th>        <th width="30%">参数</th>    </tr>    <tr>        <td>getTableData</td>        <td>获取当前表格数据</td>        <td>无</td>    </tr></table><h3 id="列属性"><a href="#列属性" class="headerlink" title="列属性"></a>列属性</h3><p>列描述数据对象，是columns中的一项</p><table> <tr>    <th>属性</th>    <th>说明</th>    <th>类型</th>    <th>默认值</th> </tr> <tr>    <td>type</td>    <td>列类型，可选值为 index:将此列渲染为索引列、selection：将此列渲染为选择列、expand:将此列渲染为可展开列、html:将此列数据解析成html输出</td>    <td>String</td>    <td>-</td></tr><tr>    <td>title</td>    <td>列头显示文字</td>    <td>String</td>    <td>#</td></tr><tr>    <td>key</td>    <td>对应列内容的字段名</td>    <td>String</td>    <td>-</td></tr><tr>    <td>editor</td>    <td>对应列的编辑器,目前支持三种类型的编辑器：text、select、helpbox，具体使用见下文</td>    <td>String</td>    <td>-</td></tr><tr>        <td>width</td>        <td>列宽</td>        <td>Number</td>        <td>-</td>    </tr>    <tr>        <td>align</td>        <td>对齐方式，可选值为 <code>left</code> 左对齐、<code>right</code> 右对齐和 <code>center</code> 居中对齐</td>        <td>String</td>        <td>left</td>    </tr>    <tr>        <td>className</td>        <td>列的样式名称</td>        <td>String</td>        <td>-</td>    </tr>    <tr>        <td>fixed</td>        <td>列是否固定在左侧或者右侧，可选值为 <code>left</code> 左侧和 <code>right</code> 右侧</td>        <td>String</td>        <td>-</td>    </tr>    <tr>        <td>ellipsis</td>        <td>开启后，文本将不换行，超出部分显示为省略号</td>        <td>Boolean</td>        <td>false</td>    </tr>    <tr>        <td>render</td>        <td>自定义渲染列，使用 Vue 的 Render 函数。传入两个参数，第一个是 h，第二个为对象，包含 row、column 和 index，分别指当前行数据，当前列数据，当前行索引，详见示例。        [学习render函数](https://cn.vuejs.org/v2/guide/render-function.html)</td>        <td>Function</td>        <td>-</td>    </tr>    <tr>        <td>renderHeader</td>        <td>自定义列头显示内容，使用 Vue 的 Render 函数。传入两个参数，第一个是 h，第二个为对象，包含 <code>column</code> 和 <code>index</code>，分别为当前列数据和当前列索引。        </td>        <td>Function</td>        <td>-</td>    </tr>    <tr>        <td>sortable</td>        <td>对应列是否可以排序，如果设置为 <code>custom</code>，则代表用户希望远程排序，需要监听 Table 的 on-sort-change 事件</td>        <td>Boolean</td>        <td>false</td>    </tr>    <tr>        <td>sortMethod</td>        <td>自定义排序使用的方法，接收三个参数 a 、 b 和 type，当设置 <code>sortable: true</code> 时有效。type 值为 asc 和 desc</td>        <td>Function</td>        <td>-</td>    </tr>    <tr>        <td>sortType</td>        <td>设置初始化排序。值为 asc 和 desc</td>        <td>String</td>        <td>-</td>    </tr>    <tr>        <td>filters</td>        <td>过滤数据的选项，格式为数组，数组中每项包含 <code>label</code> 和 <code>value</code> 属性，使用过滤，必须同时配置 filterMethod</td>        <td>Array</td>        <td>-</td>    </tr>    <tr>        <td>filterMethod</td>        <td>数据过滤使用的方法，如果是多选的筛选项，对每一条数据会执行多次，任意一次返回 true 就会显示</td>        <td>Function</td>        <td>-</td>    </tr>    <tr>        <td>filterMultiple</td>        <td>数据过滤的选项是否多选</td>        <td>Boolean</td>        <td>true</td>    </tr>    <tr>        <td>filteredValue</td>        <td>在初始化时使用过滤，数组，值为需要过滤的 value 集合</td>        <td>Array</td>        <td>-</td>    </tr>    <tr>        <td>filterRemote</td>        <td>使用远程过滤</td>        <td>Function</td>        <td>-</td>    </tr></table><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><p>文本编辑器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;text&quot;</span>,<br>  <span class="hljs-comment">//校验函数,参数分别为：新值、旧值、行数据、行号</span><br>  <span class="hljs-attr">validate</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">newVal,oldVal,row,index</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(newVal.trim() == <span class="hljs-string">&quot;&quot;</span>)&#123;<br>      <span class="hljs-keyword">return</span>&#123;<br>        <span class="hljs-attr">valid</span>:<span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">msg</span>:<span class="hljs-string">&quot;输入不能为空！&quot;</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>&#123;<span class="hljs-attr">valid</span>:<span class="hljs-literal">true</span>&#125;<br>  &#125;,<br>  <span class="hljs-comment">//文本编辑器的回调事件一般不需要用，除非你有更改此单元格值以外的其他需求</span><br>  <span class="hljs-comment">//选择框的回调方法，参数为selectData：用户选择数据,rowIndex：行索引,columnKey 列索引</span><br>  <span class="hljs-attr">callbackEvent</span>:<span class="hljs-string">&quot;on-name-change&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>下拉框编辑器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;select&quot;</span>,<br>  <span class="hljs-attr">enums</span>:[&#123;<span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;label&quot;</span>:<span class="hljs-string">&quot;男&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;value&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;label&quot;</span>:<span class="hljs-string">&quot;女&quot;</span>&#125;],<br>  <span class="hljs-comment">//下拉框编辑器的回调事件一般不需要用，除非你有更改此单元格值以外的其他需求</span><br>  <span class="hljs-comment">//选择框的回调方法，参数为selectData：用户选择数据,rowIndex：行索引,columnKey 列索引</span><br>  <span class="hljs-attr">callbackEvent</span>:<span class="hljs-string">&quot;on-sex-change&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>选择框编辑器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">type</span>:<span class="hljs-string">&quot;helpbox&quot;</span>,<br>  <span class="hljs-comment">//选择框的url</span><br>  <span class="hljs-attr">url</span>:<span class="hljs-string">&quot;/helpbox/organ/list&quot;</span>,<br>  <span class="hljs-comment">//选择框的列描述，更详细的参数请参考表格列属性说明</span><br>  <span class="hljs-attr">columns</span>:[<br>    &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;编号&#x27;</span>,<br>      <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;organizationId&#x27;</span>,<br>      <span class="hljs-attr">sortable</span>: <span class="hljs-string">&quot;custom&quot;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;组织名称&#x27;</span>,<br>      <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;name&#x27;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;组织描述&#x27;</span>,<br>      <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;description&#x27;</span><br>    &#125;<br>  ],<br>  <span class="hljs-comment">//帮助框的标题</span><br>  <span class="hljs-attr">title</span>:<span class="hljs-string">&quot;组织选择帮助框&quot;</span>,<br>  <span class="hljs-comment">//选择框的回调方法，参数为selectData：用户选择数据,rowIndex：行索引,columnKey 列索引，建议在此回调方法里自己写更新表格数据的逻辑</span><br>  <span class="hljs-attr">callbackEvent</span>:<span class="hljs-string">&quot;on-organ-changed&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
